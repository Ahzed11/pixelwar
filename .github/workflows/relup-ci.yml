name: Relup CI

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  check-if-previous-tag-is-present:
    runs-on: ubuntu-latest
    outputs:
      last-tag: ${{ steps.fetch-tag.outputs.tag }}
    steps:
    - uses: actions/checkout@v4
    - name: Fetch previous tag
      id: fetch-tag
      run: |
        LAST_TAG=$(git tag -l --sort=committerdate 'v*.*.*' | tail -n 1)
        echo "tag=$LAST_TAG" >> $GITHUB_OUTPUT

  upgrade-downgrade-test:
    needs: check-if-previous-tag-is-present
    if: ${{ startsWith(needs.check-if-previous-tag-is-present.outputs.last-tag, 'v') }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/setup

    - name: Get release name
      working-directory: .
      run: |
        RELNAME=$(./scripts/get_release_name ./rebar.config)
        echo "RELNAME=$RELNAME" >> $GITHUB_ENV

    - name: Run validation checks and build releases
      working-directory: .
      run: |
        ./scripts/check_versions ${{env.RELNAME}} $(/usr/bin/git log -1 --format='%H') > vsn.log
        cat vsn.log
        cat vsn.log | awk '/Generated appup/ || /Compiling .*\.appup\.src/ { appup=1 }
                           /relup successfully created!/ { relup=1 }
                           /RESTART version bumped, ignoring relup check./ { restart=1 }
                           END { if (!appup) { print "appup missing"; exit 1}
                                 if (!relup && !restart) { print "relup missing"; exit 1} }'
        OLD=$(cat vsn.log | awk '/OLD:/ {print $2}')
        NEW=$(cat vsn.log | awk '/NEW:/ {print $2}')
        IS_RESTART=$(cat vsn.log | awk '/RESTART version bumped, ignoring relup check./ {found=1; exit} END {if(found) print "true"; else print "false"}')
        echo "OLD_TAR=$OLD" >> $GITHUB_ENV
        echo "NEW_TAR=$NEW" >> $GITHUB_ENV
        echo "IS_RESTART=$IS_RESTART" >> $GITHUB_ENV

      
    - name: Test upgrade and downgrade of the application
      working-directory: .
      if: ${{ env.IS_RESTART == 'false' }}
      run: |
        mkdir relupci
        mkdir relupci/releases/
        cp "${{ env.OLD_TAR }}" relupci/releases/
        cp "${{ env.NEW_TAR }}" relupci/releases/

        OLD_TAG=$(echo "${{ env.OLD_TAR }}"  | sed -nr 's/^.*([0-9]+\.[0-9]+\.[0-9]+)\.tar\.gz$/\1/p')
        NEW_TAG=$(echo "${{ env.NEW_TAR }}"  | sed -nr 's/^.*([0-9]+\.[0-9]+\.[0-9]+)\.tar\.gz$/\1/p')

        RELEASE_DIR=$(readlink -f relupci/releases/)
        echo -e "{old_version, \"$OLD_TAG\"}.\n{new_version, \"$NEW_TAG\"}.\n{release_name, \"${{env.RELNAME}}\"}.\n{release_dir, \"$RELEASE_DIR\"}." >> ./test/config.config

        mkdir results
        rebar3 ct --dir ./test --verbose true --config ./test/config.config --logdir ./results --label relup-ci
    
    - name: Remove releases to save space
      working-directory: .
      if: ${{ always() && env.IS_RESTART == 'false'}}
      run: rm -rf ./results/**/*.tar.gz

    - uses: ./.github/publish-ct-results
      if: ${{ always() && env.IS_RESTART == 'false'}}
      with:
        test-name: relup-ci
